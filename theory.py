# 123456789  // 1 % 10 ---> 9                (единицы)
#
# 123456789   // 10 % 10 ---> 8               (десятки)
#
# 123456789  // 100 % 10 ---> 7               (сотни)
# 
# 123456789  // 1000 % 10 ---> 6             (тысячи)
#
# 123456789  // 10000 % 10 ---> 5           (десятки тысяч)
#
# 123456789  // 100000 % 10 ---> 4         (сотни тысяч)
#
# 123456789  // 1000000 % 10 ---> 3       (миллионы)
#
# 123456789  // 10000000 % 10 ---> 2     (десятки миллионов)
#
# 123456789  // 100000000 % 10 ---> 1   (сотни миллионов)

                                          # Цикл for
#
# Одно из преимуществ компьютеров перед людьми
# - способность повторять одни и те же действия многократно, быстро и совсем не утомляясь
#
# В Python существует две основных разновидности циклов:
# циклы, повторяющиеся определенное количество раз (for, счетные циклы, counting loops);
# циклы, повторяющиеся до наступления определенного события( while , условные циклы, conditional loops).
#
# Цикл for замечательно работает, если мы заранее знаем,
# сколько повторений (итераций) нам требуется сделать.
#
# Рассмотрим код, который распечатает 10 раз слово "Привет":

for i in range(10):
    print('Привет')
#
# Структура цикла for в Python выглядит так:
#
# for название_переменной_цикла in range(количество_повторений):
#     блок кода
#
# Двоеточие (:) в конце строки с инструкцией for сообщает интерпретатору Python,
# что дальше находится блок команд. В блок команд входят все строки,
# расположенные с отступом от строки с инструкцией for, вплоть до следующей строки без отступа.
#
# Блок команд, который выполняется в цикле for , называется телом цикла.
#
# В предыдущих уроках мы считывали несколько чисел при помощи нескольких команд input().
# С помощью цикла for можно считывать и обрабатывать сколько угодно чисел.
#
# Рассмотрим следующий программный код:

for i in range(5):
    num = int(input())
    print("Квадрат вашего числа равен:", num * num)

print("Цикл завершен")
#
# Такая программа считывает 5 чисел и выводит на экран их квадраты вместе с поясняющей надписью.
# Поскольку вторая и третья строки выделены отступом,Python считает, что это тело цикла,
# которое выполняется  раз.
# Четвертая строка не содержит отступа, поэтому не является частью цикла и
# будет выполнена всего один раз, после того как цикл завершится.


                                # Примеры использования цикла for

# Рассмотрим следующий программный код:

print("A")
print("B")

for i in range(5):
    print("C")
    print("D")

print("E")
#
# Результатом выполнения такой программы будут строки
#
# A
# B
# C
# D
# C
# D
# C
# D
# C
# D
# C
# D
# E
#
# То есть сначала программа распечатает символы А и В,
# затем символы C и D пять раз, а затем распечатает символ Е один раз.
# Тело цикла состоит из двух строк: пятой и шестой; именно они и будут повторяться.
#
#
# В программе может быть сколько угодно циклов.
# Например, если мы хотим, чтобы сначала 5 раз был распечатан символ С,
# а затем 5 раз символ D, мы можем использовать 2 цикла:

print('A')
print('B')

for i in range(5):
    print('C')

for i in range(5):
    print('D')

print('E')
#
# Результатом выполнения такой программы будут строки:
#
# A
# B
# C
# C
# C
# C
# C
# D
# D
# D
# D
# D
# E
#

                                        # Примечания
#
#
# Примечание 1. Однократное выполнение тела цикла называется итерацией цикла.
# Примечание 2. Графическое представление цикла for имеет вид:
#
# for (название переменной) in range(количеество раз)
# блок кода
#
# Примечание 3. Напомним, что блоком кода называют объединенные друг с другом строки.
# Они всегда связаны с определенной частью программы (например, с инструкцией if или for).
# В Python блоки кода формируются при помощи отступов:
# for i in range(5):
#     print("C")
#     print("D")
#
# Примечание 4. Слово for пишется маленькими буквами,
# первая строка должна заканчиваться двоеточием, а тело цикла должно быть выделено отступом.


                                    # Переменная цикла
#
# Давайте еще раз взглянем на базовую структуру цикла for:
#
# for название_переменной_цикла in range(количество_повторений):
#     блок кода
#
# Не совсем понятно, для чего нужна и как работает переменная цикла.
#
# Рассмотрим следующий код:

for i in range(10):
    print(i)
#
# Результатом выполнения такого кода будет:
#
# 0
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
#
# Когда цикл впервые начинает работу,
# Python устанавливает значение переменной цикла i = 0.
# аждый раз, когда мы повторяем тело цикла, Python увеличивает значение переменной на 1.
#
# Почему большинство программистов начинают цикл с 0, а не с 1?
# Раньше некоторые начинали цикл с 1, а некоторые с 0.
# Те и другие приводили весьма изощренные аргументы, споря о том, какой способ лучше.
# Но в конце концов победили сторонники второго варианта.
# С тех пор большинство начинает циклы с 0.
# В частности, в Python цикл for начинается с 0,
# однако в будущих уроках вы узнаете, как это изменить.
#
#
# Поскольку переменная цикла i увеличивается на 1 каждый раз,
# о ее можно использовать для отслеживания номера итерации,
# на которой мы находимся в циклическом процессе.
#
# Рассмотрим следующий код:

for i in range(10):
    print(i, '-- Привет')
#
# Результатом выполнения такого кода будет:
#
# 0 -- Привет
# 1 -- Привет
# 2 -- Привет
# 3 -- Привет
# 4 -- Привет
# 5 -- Привет
# 6 -- Привет
# 7 -- Привет
# 8 -- Привет
# 9 -- Привет
#
# Если мы хотим начать с 1, то можем написать код:

for i in range(10):
    print(i + 1, '-- Привет')
#
# Результатом выполнения такого кода будет:
#
# 1 -- Привет
# 2 -- Привет
# 3 -- Привет
# 4 -- Привет
# 5 -- Привет
# 6 -- Привет
# 7 -- Привет
# 8 -- Привет
# 9 -- Привет
# 10 -- Привет
#
# Обратите внимание, за счет выражения i + 1, мы начинаем вывод с 1, а не с 0.



                                # Имена переменных цикла
#
#
# Ранее говорилось, что имена переменных должны носить осмысленный характер и описывать их назначение.
# Однако для переменных цикла иногда делаются исключения.
# В программировании для переменных цикла обычно используют буквы i, j, k.
#
# Следующие две программы абсолютно одинаковые:
# в первой программе переменная цикла имеет название i,
# во второй программе – number:

for i in range(10):
    print(i)

for number in range(10):
    print(number)

# Результатом выполнения обеих программ будет:
#
# 0
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
#
#
# Почему для переменной циклов зарезервированы буквы i, j, k?
# Дело в том, что раньше программы использовались для математических расчетов,
# а в математике буквы a, b, c и x, y, z уже зарезервированы для других целей.
# Поэтому программисты выбрали для этой цели переменные i, j, k,
# и это стало общепринятой практикой.
#
# Бывают ситуации, когда переменная цикла не используется в теле цикла.
# В таком случае, вместо того, чтобы давать ей имя,
# мы можем указать символ нижнего подчеркивания _:

for _ in range(5):
    print('Python - awesome!')
#
# Результатом выполнения такого кода будет:
#
# Python - awesome!
# Python - awesome!
# Python - awesome!
# Python - awesome!
# Python - awesome!
#
# Если переменная цикла не используется в теле цикла,
# то указывайте вместо неё символ нижнего подчеркивания _.



                                           # Примечания
#
# Примечание. Следует помнить, что правая граница цикла в Python всегда не включительна.
# Таким образом следующий код:

for i in range(5):
    print(i)
#
# Распечатает числа от 0 до 4:
#
# 0
# 1
# 2
# 3
# 4
#
# Если требуется распечатать числа от 1 до 5, то мы пишем код:

for i in range(5):
    print(i + 1)

# Строка представляет последовательность символов в кодировке Unicode,
# заключенных в кавычки.Причем для
# определения строк Python позволяет использовать как одинарные, так и двойные кавычики:
#
#
message = "Hello World!"
print(message)  # Hello World!

name = 'Tom'
print(name)  # Tom

# Если строка длинная, ее можно разбить на части и разместить их на разных строках кода.
# В этом случае вся строка заключается в круглые скобки, а ее отдельные части - в кавычки:


text = ("Laudate omnes gentes laudate "
        "Magnificat in secula ")
print(text)

# Если же мы хотим определить многострочный текст,
# то такой текст заключается в тройные двойные или одинарные кавычки:
#
'''
Это комментарий
'''
text = '''Laudate omnes gentes laudate
Magnificat in secula
Et anima mea laudate
Magnificat in secula 
'''
print(text)

# При использовани тройных одинарных кавычек не стоит путать их с комментариями:
# если текст в тройных одинарных кавычках присваивается переменной, то это строка, а не комментарий.
#
# Управляющие последовательности в строке
# Строка может содержать ряд специальных символов -
# управляющих последовательностей или escape-последовательности. Некоторые из них:
#
# \: позволяет добавить внутрь строки слеш
#
# \': позволяет добавить внутрь строки одинарную кавычку
#
# \": позволяет добавить внутрь строки двойную кавычку
#
# \n: осуществляет переход на новую строку
#
# \t: добавляет табуляцию (4отступа)
#
# Используем некоторые последовательностей:
#
#
text = "Message:\n\"Hello World\""
print(text)

# Консольный вывод программы:

# Message:
"Hello World"

# Хотя подобные последовательности могут нам помочь в некоторых делах, например, поместить в строку кавычку,
# сделать табуляцию, перенос на другую строку. Но они также могут и мешать. Например:
#
path = "C:\python\name.txt"
print(path)

# Здесь переменная path содержит некоторый путь к файлу. Однако внутри строки встречаются символы "\n",
# которые будут интерпретированы
# как управляющая последовательность. Так, мы получим следующий консольный вывод:
#
# C:\python
# ame.txt
#
# Чтобы избежать подобной ситуации, перед строкой ставится символ r
#
path = r"C:\python\name.txt"
print(path)

# Python позволяет встравивать в строку значения других переменных.
# Для этого внутри строки переменные размещаются в фигурных скобках {},
# а перед всей строкой ставится символ f:
#
userName = "Tom"
userAge = 37
user = f"name: {userName}  age: {userAge}"
print(user)  # name: Tom  age: 37

# В данном случае на место {userName} будет вставляться значение переменной userName.
# Аналогично на вместо {userAge} будет вставляться значение переменной userAge.
#
# Обращение к символам строки
#
# И мы можем обратиться к отдельным символам строки по индексу в квадратных скобках:
#
string = "hello world"
c0 = string[0]  # h
print(c0)
c6 = string[6]  # w
print(c6)

c11 = string[11]  # ошибка IndexError: string index out of range
print(c11)

# Индексация начинается с нуля, поэтому первый символ строки будет иметь индекс 0.
# А если мы попытаемся обратиться к индексу, которого нет в строке,
# то мы получим исключение IndexError. Например, в случае выше длина строки 11 символов,
# поэтому ее символы будут иметь индексы от 0 до 10.
#
# Чтобы получить доступ к символам, начиная с конца строки,
# можно использовать отрицательные индексы.
#
# При работе с символами следует учитывать, что строка -
# это неизменяемый (immutable) тип,
# поэтому если мы попробуем изменить какой-то отдельный символ строки,
# то мы получим ошибку, как в следующем случае:
#
#
# string = "hello world"
# string[1] = "R"
#
# Мы можем только полностью переустановить значение строки, присвоив ей другое значение.
#
# Перебор строки С помощью цикла for можно перебрать все символы строки:
#
#
string = "hello world"
for char in string:
    print(char)


# При необходимости мы можем получить из строки не только отдельные символы,
# но и подстроку. Для этого используется следующий синтаксис:
#
# string[:end]: извлекается
# последовательность символов начиная с 0 - го индекса по индекс end(не включая)
#
# string[start:end]: извлекается последовательность символов начиная с индекса start по индекс end (не включая)
#
# string[start:end:step]: извлекается последовательность символов начиная с индекса start по индекс end
# (не включая) через шаг step
#
# string[start:end:step]: извлекается последовательность символов начиная с
# индекса start по индекс end (не включая) через шаг step
string = "hello world"

# с 0 до 5 индекса
sub_string1 = string[:5]
print(sub_string1)  # hello

# со 2 до 5 индекса
sub_string2 = string[2:5]
print(sub_string2)  # llo

# с 2 по 9 индекса через один символ
sub_string3 = string[2:9:2]
print(sub_string3)  # lowr


# Объединение строк
#
# Одной из самых распространенных операций со строками является их объединение или конкатенация.
# Для объединения строк применяется операция сложения:
#
name = "Tom"
surname = "Smith"
fullname = name + " " + surname
print(fullname)  # Tom Smith
#
# С объединением двух строк все просто, но что, если нам надо сложить строку и число?
# В этом случае необходимо привести число к строке с помощью функции str():

name = "Tom"
age = 33
info = "Name: " + name + " Age: " + str(age)
print(info)  # Name: Tom Age: 33

#
# Повторение строки
#
# Для повторения строки определенное количество раз применяется операция умножения:
#
print("a" * 3)  # aaa
print("he" * 4)  # hehehehe


# Сравнение строк
#
# Особо следует сказать о сравнении строк. Сравнение производится в лексикографическом порядке.
# При сравнении строк принимается во внимание символы и их регистр. Так, цифровой символ условно меньше,
# чем любой алфавитный символ.
# Алфавитный символ в верхнем регистре условно меньше, чем алфавитные символы в нижнем регистре. Например:
str1 = "1a"
str2 = "aa"
str3 = "Aa"
print(str1 > str2)  # False, так как первый символ в str1 - цифра
print(str2 > str3)  # True, так как первый символ в str2 - в нижнем регистре

# Поэтому строка "1a" условно меньше, чем строка "aa". Вначале сравнение идет по первому символу.
# Если начальные символы обоих строк представляют цифры,
# то меньшей считается меньшая цифра, например, "1a" меньше, чем "2a".
#
# Если начальные символы представляют алфавитные символы в одном и том же регистре,
# то смотрят по алфавиту. Так, "aa" меньше, чем "ba", а "ba" меньше, чем "ca".
#
# Если первые символы одинаковые, в расчет берутся вторые символы при их наличии.
#
# Зависимость от регистра не всегда желательна, так как по сути мы имеем дело с одинаковыми строками.
# В этом случае перед сравнением мы можем привести обе строки к одному из регистров.
#
# Функция lower() приводит строку к нижнему регистру, а функция upper() - к верхнему.
#
str1 = "Tom"
str2 = "tom"
print(str1 == str2)  # False - строки не равны

print(str1.lower() == str2.lower())  # True
# Функции ord и len

# Поскольку строка содержит символы Unicode,
# то с помощью функции ord() мы можем получить числовое значение для символа в кодировке Unicode:
#
print(ord("A"))  # 65

# Для получения длины строки можно использовать функцию len():


string = "hello world"
length = len(string)
print(length)  # 11

# Поиск в строке

# С помощью выражения term in string можно найти подстроку term в строке string.
# Если подстрока найдена, то выражение вернет значение True, иначе возвращается значение False:

text = "hello world"
exist = "hello" in text
print(exist)  # True

exist = "sword" in text
print(exist)  # False

# Соответственно с помощью операторов not in можно проверить отсутствие подстроки в строке:

text = "hello world"
print("hello" not in text)  # False
print("sword" not in text)  # True












